x <- seq(-1.95, 1.95, length = 30)
y <- seq(-1.95, 1.95, length = 35)
z <- outer(x, y, function(a, b) a*b^2)
z
typeof(z)
z
z[1]
length(z)
length(x)
length(y)
30*35
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ as.numeric(x_grid),
y = ~ as.numeric(x_grid),
z = ~ as.numeric(x_grid),
colorbar = list(title = 'University GPA'))
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
colorbar = list(title = 'University GPA'))
as.numeric(z_grid)
length(as.numeric(z_grid))
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
add_surface()
# Transform grid predictions to a matrix
z_grid <- fitted_values %>%
pull(univ_gpa) %>%
matrix(nrow = length(high_gpa))
x_grid <- math_sat
y_grid <- high_gpa
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
add_surface()
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
add_surface(x=~x, y=~y, z=~z)
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
add_surface(x=~as.numeric(x_grid), y=~as.numeric(y_grid), z=~as.numeric(z_grid))
z_values <- gpa_data$univ_gpa
z_values
# now add the hyperplane
add_surface(x = ~ x_values,
y = ~ y_values,
z = ~ z_values,
colorbar = list(title = 'University GPA'))
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ x_values,
y = ~ y_values,
z = ~ z_values,
colorbar = list(title = 'University GPA'))
x <- seq(-1.95, 1.95, length = 30)
y <- seq(-1.95, 1.95, length = 35)
z <- outer(x, y, function(a, b) a*b^2)
z
z_grid
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ z_grid,
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ z_grid,
colorbar = list(title = 'University GPA'))
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
colorbar = list(title = 'University GPA'))
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ as.numeric(z_grid),
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ z_grid,
colorbar = list(title = 'University GPA'))
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ z_grid,
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ z_grid,
colorbar = list(title = 'University GPA'))
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ z_grid,
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ z,
colorbar = list(title = 'University GPA'))
# Plot using plotly
gpa_data %>%
plot_ly() %>%
# first make a scatter plot of the sample data
add_markers(x = ~ as.numeric(x_grid),
y = ~ as.numeric(y_grid),
z = ~ z_grid,
marker = list(size = 5, opacity = 0.4, color = "red")) %>%
layout(scene = list(xaxis = list(title = 'Math SAT'),
yaxis = list(title = 'Highschool GPA'),
zaxis = list(title = 'University GPA'))) %>%
# now add the hyperplane
add_surface(x = ~ x,
y = ~ y,
z = ~ z,
colorbar = list(title = 'University GPA'))
depression_data
depression_data.treatment
depression_data[treatment]
depression_data$treatment
depression_data$treatment == "B"
depression_data %>% filter(treatment == "B")
depression_data %>% filter(treatment == "B") %>% select(effect)
t.test(depression_data %>% filter(treatment == "B") %>% select(effect),
depression_data %>% filter(treatment == "C") %>% select(effect)
)
?t.test
with (depression_data, t.test(effect[treatment =="B"],effect[treatment =="C"],))
tidy(lm(effect ~ treatment, depression_data %>% mutate(treatment = relevel(treatment, ref = "B")))
tidy(lm(effect ~ treatment, depression_data %>% mutate(treatment = relevel(treatment, ref = "B")))
depression_data %>% mutate(treatment = relevel(treatment, ref = "B")
)
tidy(lm(effect ~ treatment, depression_data %>% mutate(treatment = relevel(treatment, ref = "B"))))
depression_data
?factor
tidy(lm(effect ~ treatment, depression_data %>% mutate(treatment = factor(treatment, levels = c("B","A","C")))))
tidy(lm(effect ~ treatment, depression_data %>% mutate(treatment = factor(treatment, levels = c("B","A","C")))))
with (depression_data, t.test(effect[treatment =="B"],effect[treatment =="C"],))
# direct t-test on data
with (depression_data, t.test(effect[treatment =="B"],effect[treatment =="C"],))
# Set B as reference base for lm model
tidy(lm(effect ~ treatment, data = depression_data %>%
mutate(treatment = factor(treatment, levels = c("B","A","C")))))
# direct t-test on data
with (depression_data, t.test(effect[treatment =="B"],effect[treatment =="C"],))
# Set B as reference base for lm model
tidy(lm(effect ~ treatment, data = depression_data %>%
mutate(treatment = factor(treatment, levels = c("B","A","C")))))
depression_data %>%
ggplot(aes(x = treatment, y = effect, group = treatment)) +
# Hide the median line
geom_boxplot(fatten = NULL) +
# Plot mean value with red line instead
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
color = "red")+
labs(title = "Effect across all treatments types",
subtitle = "Red lines are mean values"
x = "Treatment",
depression_data %>%
ggplot(aes(x = treatment, y = effect, group = treatment)) +
# Hide the median line
geom_boxplot(fatten = NULL) +
# Plot mean value with red line instead
stat_summary(fun.y = mean, geom = "errorbar", aes(ymax = ..y.., ymin = ..y..),
color = "red")+
labs(title = "Effect across all treatments types",
subtitle = "Red lines are mean values",
x = "Treatment",
y= "Effect")
library(tidyverse)
library(broom)
library(devtools)
install.package("devtools")
install.packages("devtools")
library(devtools)
install_github('plotly/dashR')
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
# Load necessary datasets
brain_data <- read_csv("brain_data.csv")
gpa_data <- read_csv("gpa_data.csv")
sleep_data <- read_csv("sleep_data.csv")
depression_data <- read_csv("depression_data.csv")
predict(model_add, depression_data)
model_add <- lm(effect ~ age + treatment, data = depression_data)
model_int <- lm(effect ~ age * treatment, data = depression_data)
predict(model_add, depression_data)
model_add
depression_data
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_points()
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point()
?geom_abline
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = 20)
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = list(20,10))
model_int
model_int$coefficients
model_int$coefficients[1]
model_int$coefficients[1] %>% pull()
model_int$coefficients$(Intercept)
tidy(model_int)
tidy(model_add)
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = estimate, data = tidy(model_add))
tidy(model_add) %>% select(estimate) %>% filter(term %in% "(Intercept)")
tidy(model_add) %>% filter(term %in% "(Intercept)") select(estimate) %>%
tidy(model_add) %>% filter(term %in% "(Intercept)") %>% select(estimate)
tidy(model_add) %>% filter(term %in% "(Intercept)") %>% select(estimate) %>% pull()
tidy(model_add)
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = tidy(model_add) %>% filter(term %in% "(Intercept)") %>% select(estimate) %>% pull(),
slope = tidy(model_add) %>% filter(term %in% "age") %>% select(estimate) %>% pull())
model_add$coeff[c(1,4)]
model_add$coeff[1:2]
model_add$coeff
model_add$coeff
mod_add_a <- model_add$coeff[c(1,2)]
mod_add_b <- c(sum(model_add$coeff[1,3]),model_add$coeff[2])
mod_add_c <- c(sum(lm_g_mrna$coeff[c(1,4)]),lm_g_mrna$coeff[2])
mod_add_b <- c(sum(model_add$coeff[1,3]),model_add$coeff[2])
model_add$coeff[1,3]
model_add$coeff[c(1,3)]
mod_add_b <- c(sum(model_add$coeff[c(1,3)]),model_add$coeff[2])
mod_add_c <- c(sum(lm_g_mrna$coeff[c(1,4)]),lm_g_mrna$coeff[2])
mod_add_a <- model_add$coeff[c(1,2)]
mod_add_b <- c(sum(model_add$coeff[c(1,3)]),model_add$coeff[2])
mod_add_c <- c(sum(model_add$coeff[c(1,4)]),model_add$coeff[2])
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = model_add_a[1], slope = model_add_a[2]) +
geom_abline(intercept = model_add_b[1], slope = model_add_b[2]) +
geom_abline(intercept = model_add_c[1], slope = model_add_c[2]) +
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = model_add_a[1], slope = model_add_a[2]) +
geom_abline(intercept = model_add_b[1], slope = model_add_b[2]) +
geom_abline(intercept = model_add_c[1], slope = model_add_c[2])
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = mod_add_a[1], slope = mod_add_a[2]) +
geom_abline(intercept = mod_add_b[1], slope = mod_add_b[2]) +
geom_abline(intercept = mod_add_c[1], slope = mod_add_c[2])
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = mod_add_a[1], slope = mod_add_a[2], color = "red") +
geom_abline(intercept = mod_add_b[1], slope = mod_add_b[2], color = "green") +
geom_abline(intercept = mod_add_c[1], slope = mod_add_c[2], color = "blue")
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = mod_add_a[1], slope = mod_add_a[2], color = "red") +
geom_abline(intercept = mod_add_b[1], slope = mod_add_b[2], color = "magenta") +
geom_abline(intercept = mod_add_c[1], slope = mod_add_c[2], color = "blue")
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = mod_add_a[1], slope = mod_add_a[2], color = "magenta") +
geom_abline(intercept = mod_add_b[1], slope = mod_add_b[2], color = "blue") +
geom_abline(intercept = mod_add_c[1], slope = mod_add_c[2], color = "red")+
scale_color_manual(values = cols)
# Colour scale
cols <- c("A" = "magenta", "B" = "blue", "C" = "red")
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = mod_add_a[1], slope = mod_add_a[2], color = "magenta") +
geom_abline(intercept = mod_add_b[1], slope = mod_add_b[2], color = "blue") +
geom_abline(intercept = mod_add_c[1], slope = mod_add_c[2], color = "red")+
scale_color_manual(values = cols)
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = mod_add_a[1], slope = mod_add_a[2], color = "magenta") +
geom_abline(intercept = mod_add_b[1], slope = mod_add_b[2], color = "blue") +
geom_abline(intercept = mod_add_c[1], slope = mod_add_c[2], color = "red")+
scale_color_manual(values = cols, name = "Treatment") +
labs()
model_int
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = mod_int_a[1], slope = mod_int_a[2], color = "magenta") +
geom_abline(intercept = mod_int_b[1], slope = mod_int_b[2], color = "blue") +
geom_abline(intercept = mod_int_c[1], slope = mod_int_c[2], color = "red")+
scale_color_manual(values = cols, name = "Treatment") +
labs()
# Extracting coefficients
mod_int_a <- model_add$coeff[c(1,2)]
mod_int_b <- c(sum(model_int$coeff[c(1,3)]),sum(model_int$coeff[c(2,5)]))
mod_int_c <- c(sum(model_int$coeff[c(1,4)]),sum(model_int$coeff[c(2,6)]))
# Colour scale for each of the treatment
cols <- c("A" = "magenta", "B" = "blue", "C" = "red")
depression_data %>%
ggplot(aes(x = age, y = effect, group = factor(treatment), color = factor(treatment))) +
geom_point() +
geom_abline(intercept = mod_int_a[1], slope = mod_int_a[2], color = "magenta") +
geom_abline(intercept = mod_int_b[1], slope = mod_int_b[2], color = "blue") +
geom_abline(intercept = mod_int_c[1], slope = mod_int_c[2], color = "red")+
scale_color_manual(values = cols, name = "Treatment") +
labs()
model_int
model_int$coefficients[6]
sleep_data
lm(time_to_sleep ~ ., data = sleep_data)
model.matrix(lm(time_to_sleep ~ ., data = sleep_data))
summary(sleep_data)
model.matrix(lm(time_to_sleep ~ ., data = sleep_data))
model.matrix(lm(time_to_sleep ~ ., data = sleep_data)) %>% head()
brain_model
brain_data
brain_model <- lm(brain_wgt ~ ., data = brain_data)
?augment
?augment
broom::augment(brain_model)
brain_data
brain_data <- broom::augment(brain_model)
brain_data %>% glimpse()
(44.5 - 16.03)^2
(44.5 - 16.03)
brain_model
tidy(brain_model)
(3.385 - 16.03)
brain_data
sum((brain$.resid)^2)
sum((brain_data$.resid)^2)
brain$brain_wgt - mean(brain$.fitted
)
brain_data$brain_wgt - mean(brain_data$.fitted
)
r_square
r_squared = 1 - sum((brain$.resid)^2)/sum((brain_data$brain_wgt - mean(brain_data$.fitted))^2)
r_squared = 1 - sum((brain_data$.resid)^2) / sum((brain_data$brain_wgt - mean(brain_data$.fitted))^2)
r_squared
broom::glance(brain_model)
# Show example 5 rows of model.matrix output
model.matrix(lm(time_to_sleep ~ ., data = sleep_data)) %>% head(10)
# Show example 5 rows of model.matrix output
model.matrix(lm(time_to_sleep ~ ., data = sleep_data)) %>% head(30)
# Show example 5 rows of model.matrix output
model.matrix(lm(time_to_sleep ~ ., data = sleep_data)) %>% head(10)
gpa_data
ggpa_data
gpa_data
?model.matrix
library(stats)
gpa_model_1 = lm(univ_gpa ~ high_gpa, data = gpa_data)
gpa_model_2 = lm(univ_gpa ~ high_gpa + math_sat, data = gpa_data)
model_1 = lm(univ_gpa ~ high_gpa, data = gpa_data)
model_2 = lm(univ_gpa ~ high_gpa + math_sat, data = gpa_data)
glance(model_1)
glance(model_2)
glance(model_1)
glance(model_2)
glance(model_1)
glance(model_2)
anova(model_1)
anova(model_2)
anova(model_1)
anova(model_2)
anova(model_1, model_2)
tidy(model_1)
glance(model_1)
tidy(model_1)
tidy(model_1)
glance(model_1)
12.2^2
tidy(model_2)
tidy(model_2) %>% filter(term %in% "math_sat")
tidy(model_2) %>% filter(term %in% "math_sat")
library(tidyverse, quietly = TRUE)
library(broom, quietly = TRUE)
# Load necessary datasets
brain_data <- read_csv("brain_data.csv")
gpa_data <- read_csv("gpa_data.csv")
sleep_data <- read_csv("sleep_data.csv")
depression_data <- read_csv("depression_data.csv")
model_add <- lm(effect ~ age + treatment, data = depression_data)
model_int <- lm(effect ~ age * treatment, data = depression_data)
model_int
tidy(model_int)
library(tidyverse)
library(ggplotly)
df <- as_tibble(read_csv("../data/aac_data_cleaned.csv"))
df %>%
ggplot(aes(x = factor(animal_type), y = total_time_in_shelter_days)) +
geom_jitter( alpha = 0.1) +
geom_boxplot(outlier.shape = NA) +
coord_trans(y = "log10")
setwd("~/Documents/mds/532/r_app/scripts")
